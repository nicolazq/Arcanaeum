{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#_1","title":"\ud83d\udc4b","text":""},{"location":"Tools/bash/","title":"Bash","text":""},{"location":"Tools/bash/#source-command","title":"Source Command","text":"<p>The source command reads and executes commands from the file specified as its argument in the current shell environment. It is useful to load functions, variables, and configuration files into shell scripts.</p>"},{"location":"Tools/conda/","title":"Conda","text":"<pre><code>conda create -n p310 python=3.10\nconda activate p310\nconda deactivate\nconda remove --name ENV_NAME --all\n</code></pre> <pre><code>pip install jupyterlab\njupyter lab\n</code></pre> <pre><code>pip install --upgrade pip\npip install --upgrade setuptools wheel\n\npip install grpcio==1.57.0\npip install numpy\npip install matplotlib\npip install ipympl\npip install scipy\npip install scikit-learn\npip install tensorflow\npip install ipywidgets\n\npip install networkx\npip install pydot\nbrew install graphviz\n</code></pre>"},{"location":"Tools/conda/#conda","title":"conda","text":"<pre><code>conda create -n p31012 python=3.10.12\nconda activate p31012\npip install tf-models-official\n</code></pre> <pre><code>conda deactivate\nconda remove --name ENV_NAME --all\n</code></pre>"},{"location":"Tools/conda/#jupyterlab","title":"JupyterLab","text":"<pre><code>pip install jupyterlab\n</code></pre> <pre><code>jupyter lab\n</code></pre>"},{"location":"Tools/conda/#apple-silicon","title":"Apple Silicon","text":"<p>Deep Learning on the M1 Pro with Apple Silicon</p>"},{"location":"Tools/data/","title":"Data","text":""},{"location":"Tools/data/#data-labeling","title":"Data Labeling","text":"<ul> <li>https://labelstud.io/</li> <li>https://datatorch.io/</li> </ul>"},{"location":"Tools/git/","title":"Git","text":""},{"location":"Tools/git/#restart-terminal-without-closing-on-macos","title":"Restart terminal without closing on MacOS","text":"<pre><code>exec zsh -l\n</code></pre> <pre><code>cat ~/.zshrc\n</code></pre> <pre><code>gitpush() {\n    git add .\n    git commit -m \"Workbench workspace sync\"\n    git push\n}\nalias gp=gitpush\nalias gs=\"git status -su\"\n</code></pre> <pre><code>git config --global user.name\n</code></pre> <pre><code>git config --global user.email\n</code></pre> <p>Git keeps prompting me for a password</p>"},{"location":"Tools/gradio/","title":"Gradio","text":"<ul> <li>https://www.gradio.app/guides/quickstart</li> <li> <p>https://www.gradio.app/guides/sharing-your-app</p> </li> <li> <p>https://scikit-learn.org/stable/auto_examples/linear_model/plot_iris_logistic.html</p> </li> </ul> <pre><code>from sklearn.linear_model import LogisticRegression\nimport numpy as np\nimport pickle\n\n# Defining arrays for training\nx_train = np.array([[0.5, 1.5], [1, 1], [1.5, 0.5], [1, 0.5], [2, 0], [2, 0.5], [1, 2], [2, 2], [0.5, 3], [2, 1.5], [1, 2.5], [3, 1]])\ny_train = np.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n\n# Training model\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\n\n# Saving the model\npickle.dump(model, open('trained_model_logreg.pkl', 'wb'))\n</code></pre> <pre><code>from sklearn.linear_model import LogisticRegression\nimport gradio as gr\nimport pandas as pd\nimport numpy as np\nimport pickle\n\n# Loading the model\nmodel_loaded = pickle.load(open('trained_model_logreg.pkl', 'rb'))\n\n# Defining a function for prediction\ndef predict(x1,x2):\n\n    # Converting input values to np.ndarray\n    x_array = np.array([float(x1),float(x2)])\n\n    # Predicting\n    prediction = model_loaded.predict([x_array])\n\n    if prediction:\n        return \"POSITIVE ANSWER\"\n    else:\n        return \"NEGATIVE ANSWER\"\n    return\n\n# Launching\ndemo = gr.Interface(\n    fn=predict,\n    inputs=[\"text\", \"text\"],\n    outputs=\"text\",\n    title='Simple Logistic Regression'\n)\n\ndemo.launch()\n</code></pre>"},{"location":"Tools/llm/","title":"Llm","text":""},{"location":"Tools/llm/#openai","title":"OpenAI","text":"<pre><code>!pip install openai\n!pip install python-dotenv\n</code></pre> <pre><code>import openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_key  = os.getenv('OPENAI_API_KEY')\n</code></pre> <pre><code>def get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model's output\n    )\n    return response.choices[0].message[\"content\"]\n</code></pre> <pre><code>text = f\"\"\"\nYou should express what you want a model to do by \\ \nproviding instructions that are as clear and \\ \nspecific as you can possibly make them. \\ \nThis will guide the model towards the desired output, \\ \nand reduce the chances of receiving irrelevant \\ \nor incorrect responses. Don't confuse writing a \\ \nclear prompt with writing a short prompt. \\ \nIn many cases, longer prompts provide more clarity \\ \nand context for the model, which can lead to \\ \nmore detailed and relevant outputs.\n\"\"\"\nprompt = f\"\"\"\nSummarize the text delimited by triple backticks \\ \ninto a single sentence.\n```{text}```\n\"\"\"\nresponse = get_completion(prompt)\n</code></pre>"},{"location":"Tools/numpy/","title":"Numpy","text":"<p>NumPy quickstart</p> <p>Broadcasting</p> <pre><code>import numpy as np\n</code></pre> <pre><code>a = np.array([[ 0.0,  0.0,  0.0],\n            [10.0, 10.0, 10.0],\n            [20.0, 20.0, 20.0]])\n</code></pre> <pre><code>b = np.array([[1.0, 2.0, 3.0]])\n</code></pre> <pre><code>b = np.array([[1.0], [2.0], [3.0]])\n</code></pre>"},{"location":"Tools/sklearn/","title":"Sklearn","text":"<ul> <li>https://scikit-learn.org/stable/getting_started.html</li> </ul>"},{"location":"Tools/sklearn/#linearregression","title":"LinearRegression","text":"<ul> <li>https://scikit-learn.org/stable/modules/linear_model.html#ordinary-least-squares</li> <li>https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html</li> </ul>"},{"location":"Tools/sklearn/#logisticregression","title":"LogisticRegression","text":"<ul> <li>https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression</li> <li>https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html</li> </ul>"},{"location":"Tools/sklearn/#misc","title":"misc","text":"<ul> <li>https://scikit-learn.org/stable/model_persistence.html</li> </ul>"},{"location":"Tools/test/","title":"TEST2","text":""},{"location":"Tools/vsc/","title":"Vsc","text":"<p>https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal</p> <pre><code>Shell Command: Install code in PATH\n</code></pre>"}]}